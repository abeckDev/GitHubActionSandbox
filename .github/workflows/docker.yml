name: Docker Build
on:
  push:
    branches: [ master ]
    paths: 
      - src/**
  pull_request:
    branches: [ master ]
    paths: 
      - src/Dockerfile

env:
  IMAGE_NAME: sampleDockerApp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download XML Starlet
        run: sudo apt-get update; sudo apt-get install xmlstarlet -y
      - name: Determine current Version
        run: |
          currentVersion=$(xmlstarlet sel -t -v '//Version' src/SampleWebApi.csproj)
          echo "Current Version: $currentVersion"

      - name: Run tests
        working-directory: src/
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Download XML Starlet
        run: sudo apt-get update; sudo apt-get install xmlstarlet -y
      - name: Build image
        working-directory: src/
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        working-directory: src/
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        working-directory: src/
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          currentVersion=$(xmlstarlet sel -t -v '//Version' SampleWebApi.csproj)
          

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$currentVersion
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$currentVersion
